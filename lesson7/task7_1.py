"""
Задания блока 7 не обязательны для выполнения. Они являются примером более сложных
алгоритмических задач, которые можно добавить в репозиторий (Ваше портфолио).

Напишите программу, которая на вход будет принимать список списков
([[0, 4, 8], [‘a’, -0], [1, 5]]) и определять первый валидный подмассив
(он гарантированно есть). Валидным считается массив, состоящий из двух натуральных чисел,
при чем первое число должно быть меньше второго. Назовем эти числа А и В.
Далее программа генерирует случайное натуральное число N, которое лежит в диапазоне [А, В]
и генерирует две лесенки из символа «*», где количество символов в первой лестнице варьируется
от B до N, а во второй от A до N.

Программа должна состоять из трех функций: check_input, get_ladder и main.

Функция check_input принимает на вход массив, проверяет его валидность. Если данные корректны –
возвращает значение True, иначе False.

Функция get_ladder принимает на вход валидный массив, генерирует число N и массив данных
для вывода лестницы.

Функция main принимает на вход список списков, находит первый валидный подмассив,
передает значения подмассива на функцию get_ladder и печатает результат.

Разберем программу на примере:

Входные данные: [[0, 4, 8], [‘a’, -0], [1, 5]]

В данном списке валидным будет последний элемент. Тогда число A=1, B=5. Пусть случайно
сгенерированное число N=3, тогда на выходе функции get_ladder должен быть следующий массив:
[‘*****’, ‘****’, ‘***’, ‘*’, ‘**’, ‘***’].

В результате работы программы должно быть выведено следующее:

*****

****

***

*

**

***
название функций:
def check_input(), def get_ladder(), def main()
"""
import random


def check_input(list):
    return (
            len(list) == 2 and
            isinstance(list[0], int) and isinstance(list[1], int) and
            list[1] > list[0] > 0
    )


def get_ladder(list):
    a = list[0]
    b = list[1]
    n = random.randint(a, b)
    ladder = []

    for i in range(b, n - 1, -1):
        ladder.append('*' * i)
    for i in range(a, n + 1):
        ladder.append('*' * i)
    return ladder


def main(stdin):
    for list in stdin:
        if check_input(list):
            print('\n'.join(get_ladder(list)))
            break
